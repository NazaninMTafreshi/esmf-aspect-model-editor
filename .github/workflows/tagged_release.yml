name: "Create Tagged Release"

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version number of the release'
        required: true

jobs:
  gh_tagged_release:
    name: Create tagged release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          ref: v4.2.1

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Download aspect model service into project (Mac)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir backend

          ASSET_ONE_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq '.assets[0].browser_download_url')
          ASSET_TWO_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq '.assets[1].browser_download_url')
          ASSET_THREE_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq '.assets[2].browser_download_url')

          if [[ ${ASSET_ONE_URL} == *"-mac"* ]];
            then
              echo $ASSET_ONE_URL
              DOWNLOAD_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq -r '.assets[0].url')
          fi

          if [[ ${ASSET_TWO_URL} == *"-mac"* ]];
            then
              echo $ASSET_TWO_URL
              DOWNLOAD_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq -r '.assets[1].url')
          fi

          if [[ ${ASSET_THREE_URL} == *"-mac"* ]];
            then
              echo ASSET_THREE_URL
              DOWNLOAD_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq -r '.assets[2].url')
          fi

          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $DOWNLOAD_URL > backend/ame-backend.sh
          chmod 755 backend/ame-backend.sh

      - name: Download aspect model service into project (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir backend

          ASSET_ONE_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq '.assets[0].browser_download_url')
          ASSET_TWO_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq '.assets[1].browser_download_url')
          ASSET_THREE_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq '.assets[2].browser_download_url')

          if [[ ${ASSET_ONE_URL} == *"-linux"* ]];
            then
              echo $ASSET_ONE_URL
              DOWNLOAD_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq -r '.assets[0].url')
          fi

          if [[ ${ASSET_TWO_URL} == *"-linux"* ]];
            then
              echo $ASSET_TWO_URL
              DOWNLOAD_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq -r '.assets[1].url')
          fi

          if [[ ${ASSET_THREE_URL} == *"-linux"* ]];
            then
              echo ASSET_THREE_URL
              DOWNLOAD_URL=$(curl -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }} | jq -r '.assets[2].url')
          fi

          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $DOWNLOAD_URL > backend/ame-backend.sh
          chmod 755 backend/ame-backend.sh

      - name: Download aspect model service into project (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir backend

          $RESPONSE=$(curl.exe -sl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/eclipse-esmf/esmf-aspect-model-editor-backend/releases/tags/v${{ github.event.inputs.release_version }})
          $RESPONSE_JSON=($RESPONSE | ConvertFrom-Json)

          if ($RESPONSE_JSON.assets[0].browser_download_url -match ".exe") {
            echo $RESPONSE_JSON.assets[0].browser_download_url
            curl.exe -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $RESPONSE_JSON.assets[0].url -o backend/ame-backend.exe
          } elseif ($RESPONSE_JSON.assets[1].browser_download_url -match ".exe") {
            echo $RESPONSE_JSON.assets[1].browser_download_url
            curl.exe -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $RESPONSE_JSON.assets[1].url -o backend/ame-backend.exe
          } elseif ($RESPONSE_JSON.assets[2].browser_download_url -match ".exe") {
            echo $RESPONSE_JSON.assets[2].browser_download_url
            curl.exe -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" $RESPONSE_JSON.assets[2].url -o backend/ame-backend.exe
          }

      - name: Install node modules
        run: npm install
        working-directory: core

      - name: Set app version (Unix)
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
        run: npm version ${{ github.event.inputs.release_version }}
        working-directory: core

      - name: Set app version (Windows)
        if: matrix.os == 'windows-latest'
        run: npm version ${{ github.event.inputs.release_version }}
        working-directory: core

      - name: Build electron app (Mac)
        if: matrix.os == 'macos-latest'
        run: npm run electron-builder-mac-prod
        working-directory: core

      - name: Build electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run electron-builder-linux-prod
        working-directory: core

      - name: Build electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run electron-builder-win-prod
        working-directory: core

      - name: Create Windows installer
        if: matrix.os == 'windows-latest'
        uses: joncloud/makensis-action@v3.6
        with:
          script-file: win-installer/installer.nsi
          arguments: "-V3 -DVERSION=${{ github.event.inputs.release_version }}"

      - name: Create GitHub release (Mac)
        if: ${{ (matrix.os == 'macos-latest') && (!contains( github.ref, '-rc' )) }}
        uses: svenstaro/upload-release-action@latest
        with:
          overwrite: true
          prerelease: false
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: core/electron/aspect-model-editor-v${{ github.event.inputs.release_version }}-mac.dmg
          tag: test

      - name: Create GitHub pre-release (Mac)
        if: ${{ (matrix.os == 'macos-latest') && (contains( github.ref, '-rc' )) }}
        uses: svenstaro/upload-release-action@latest
        with:
          overwrite: true
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: core/electron/aspect-model-editor-v${{ github.event.inputs.release_version }}-mac.dmg
          tag: test

      - name: Create GitHub release (Linux)
        if: ${{ (matrix.os == 'ubuntu-latest') && (!contains( github.ref, '-rc' )) }}
        uses: svenstaro/upload-release-action@latest
        with:
          overwrite: true
          prerelease: false
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: core/electron/aspect-model-editor-v${{ github.event.inputs.release_version }}-linux.tar.gz
          tag: test

      - name: Create GitHub pre-release (Linux)
        if: ${{ (matrix.os == 'ubuntu-latest') && (contains( github.ref, '-rc' )) }}
        uses: svenstaro/upload-release-action@latest
        with:
          overwrite: true
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: core/electron/aspect-model-editor-v${{ github.event.inputs.release_version }}-linux.tar.gz
          tag: v${{ github.event.inputs.release_version }}

      - name: Create GitHub release (Windows)
        if: ${{ (matrix.os == 'windows-latest') && (!contains( github.ref, '-rc' )) }}
        uses: svenstaro/upload-release-action@latest
        with:
          overwrite: true
          prerelease: false
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: win-installer/aspect-model-editor-v${{ github.event.inputs.release_version }}-win.exe
          tag: test

      - name: Create GitHub pre-release (Windows)
        if: ${{ (matrix.os == 'windows-latest') && (contains( github.ref, '-rc' )) }}
        uses: svenstaro/upload-release-action@latest
        with:
          overwrite: true
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: win-installer/aspect-model-editor-v${{ github.event.inputs.release_version }}-win.exe
          tag: test
